import numpy as np

def theta(state):
    C = np.zeros((5, 64), dtype=int)
    D = np.zeros((5, 64), dtype=int)
    for x in range(5):
        for z in range(64):
            C[x][z] = state[x][0][z] ^ state[x][1][z] ^ state[x][2][z] ^ state[x][3][z] ^ state[x][4][z]
    for x in range(5):
        for z in range(64):
            D[x][z] = C[(x - 1) % 5][z] ^ np.roll(C[(x + 1) % 5], 1)[z]
    for x in range(5):
        for y in range(5):
            for z in range(64):
                state[x][y][z] ^= D[x][z]
    return state

# Initialize state matrix with bitrate lanes having at least one nonzero bit
state = np.zeros((5, 5, 64), dtype=int)
for x in range(5):
    for y in range(4):  # First 4 rows (bitrate portion)
        state[x][y][0] = 1  # Set the least significant bit to 1

# Capacity lanes are initially zero
capacity_lanes = [(x, 4) for x in range(5)]

# Apply Theta operation
state = theta(state)

# Check capacity lanes
nonzero_lanes = [(x, y) for x, y in capacity_lanes if np.any(state[x][y] != 0)]
print(f"Nonzero capacity lanes after one round: {nonzero_lanes}")
